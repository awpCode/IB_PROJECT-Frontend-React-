[{"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\index.js":"1","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\App.js":"2","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\ShowInterview.js":"4","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\Interviews.js":"5","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\EditInterview.js":"6","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\NewUser.js":"7","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\NewInterview.js":"8","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\EditUser.js":"9","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\Users.js":"10","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\InterviewRow.js":"11","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\ShowUser.js":"12"},{"size":542,"mtime":1611476552900,"results":"13","hashOfConfig":"14"},{"size":1190,"mtime":1611509971747,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607267751607,"results":"16","hashOfConfig":"14"},{"size":358,"mtime":1611480980682,"results":"17","hashOfConfig":"14"},{"size":1951,"mtime":1611567872238,"results":"18","hashOfConfig":"14"},{"size":4294,"mtime":1611568278559,"results":"19","hashOfConfig":"14"},{"size":0,"mtime":1611477390138,"results":"20","hashOfConfig":"14"},{"size":5352,"mtime":1611565835333,"results":"21","hashOfConfig":"14"},{"size":0,"mtime":1611477351635,"results":"22","hashOfConfig":"14"},{"size":0,"mtime":1611477338212,"results":"23","hashOfConfig":"14"},{"size":528,"mtime":1611567759235,"results":"24","hashOfConfig":"14"},{"size":0,"mtime":1611477343003,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"x5f4nq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\index.js",[],["53","54"],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\App.js",[],["55","56"],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\ShowInterview.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\Interviews.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\EditInterview.js",["57","58"],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\NewUser.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\NewInterview.js",["59","60","61"],"import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nconst NewInterview = (props) => {\r\n    const [starttime, setStarttime] = useState('');\r\n    const [endtime, setEndTime] = useState('');\r\n    const [userIds, setUserIds] = useState([]);\r\n    const [users, setUsers] = useState([...props.location.state]);\r\n    const [isAdded, setIsAdded] = useState(false);\r\n    const [errors, setErrors] = useState([]);\r\n\r\n  \r\n    const postInterview = e => {\r\n        e.preventDefault();\r\n        submitInterview();\r\n    };\r\n\r\n    const submitInterview =async () => {\r\n        let res = null;\r\n        try {\r\n            res = await axios.post('http://localhost:3001/interviews',{starttime: starttime, endtime: endtime, user_ids: userIds.map(e => e.value)});\r\n            setIsAdded(true);\r\n            setErrors([]);\r\n        }\r\n        catch(err){\r\n            setErrors(err.response.data.error);\r\n        }\r\n        \r\n    };\r\n\r\n    const updateStartTime = e => {\r\n        setStarttime(e.target.value);\r\n    };\r\n    const updateEndTime = e => {\r\n        setEndTime(e.target.value);\r\n    };\r\n\r\n    const printErrors = () => {\r\n\r\n        if(errors.length === 0)\r\n            return '';  \r\n        else{\r\n            return (\r\n                    <div className=\"alert alert-danger\">\r\n                    <h4 className=\"alert-heading\">The following errors prevented the Interview from getting saved.</h4>\r\n                    <ul>\r\n                        {errors.map(error => <li key = {error}>{error}</li>)}\r\n                    </ul>\r\n                     <button onClick = {() => setErrors([])} >Close</button>\r\n                 </div> \r\n            );\r\n        }\r\n    };\r\n    if(isAdded)\r\n    {\r\n        return (\r\n            <Redirect to =\"/\" />\r\n        );\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n        <h1 className = \"text-center\"> Schedule New Interview</h1>\r\n        {printErrors()}        \r\n        <div className=\"container m-5\">\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-10\">\r\n                    <form className = \"shadow p-3 mb-5 bg-dark rounded\" onSubmit = {postInterview}>\r\n                    \r\n                    <div className=\"form-group row\">\r\n                        <label className = \"col-2 col-form-label text-light\">Start-Time:</label>\r\n                        <div className=\"col-10\">\r\n                            <input className = \"form-control shadow rounded\" type = \"datetime-local\" value = {starttime} onChange = {updateStartTime} />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-group row\">\r\n                        <label className = \"col-2 col-form-label text-light\">End-Time:</label>\r\n                        <div className=\"col-10\">\r\n                            <input className = \"form-control shadow rounded\" type = \"datetime-local\" value = {endtime}  onChange = {updateEndTime} />\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className = \"form-group row\">\r\n                        <label className = \"col-2 col-form-label text-light\">Users:</label>\r\n                        <div className = \"col-10\">\r\n                            <MultiSelect options={users.map(user => ({ label: user.id, value: user.id}))} value={userIds} onChange={setUserIds} labelledBy={\"Select\"} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br />\r\n\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <button className = \"btn btn-outline-light btn-lg\" type = \"submit\" >Create Interview </button> \r\n                    </div>\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n \r\nexport default NewInterview;\r\n\r\n/*\r\n\r\n<label>Select Users:</label>\r\n<select multiple = {true} value = {userIds} onChange = {updateUserIds} >\r\n    {users.map(user => (\r\n        <option key = {user.id} value = {user.id}>{user.id}</option>\r\n    ))}\r\n</select>\r\n\r\n*/\r\n\r\n/*\r\n /*\r\nconst updateUserIds = e => {\r\n    \r\n    console.log(e.target.value);\r\n    let value = Array.from(e.target.selectedOptions, option => option.value);\r\n    setUserIds(value);\r\n    \r\n    if(userIds.includes(e.target.value) === true){\r\n        setUserIds(userIds.filter(ele => ele !== e.target.value));\r\n    }\r\n    else{\r\n        setUserIds([...userIds, e.target.value]);\r\n    }\r\n    console.log(userIds);\r\n};\r\n    */\r\n\r\n/*\r\n\r\n\r\naxios.post('http://localhost:3001/interviews',{\r\n          starttime: starttime,\r\n          endtime: endtime,\r\n          user_ids: userIds.map(e => e.value)\r\n        })\r\n        .then(res => console.log(res))\r\n        .catch(function (error) {\r\n            if (error.response) {\r\n              console.log(error.response.data);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n            }\r\n          });\r\n\r\n\r\n*/\r\n\r\n  /*(() => {\r\n        getUsers();\r\n    },[])\r\n\r\n    const getUsers = async () => {\r\n        const res = await axios.get('http://localhost:3001/users');\r\n        setUsers(res.data);\r\n    };\r\n    */","C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\EditUser.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\Users.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\InterviewRow.js",[],"C:\\Users\\risha\\OneDrive\\Desktop\\RubyProject\\interviewBit\\frontend\\src\\Components\\ShowUser.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":18,"column":7,"nodeType":"70","endLine":18,"endColumn":9,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":23,"column":13,"nodeType":"74","messageId":"75","endLine":23,"endColumn":16},{"ruleId":"72","severity":1,"message":"76","line":2,"column":17,"nodeType":"74","messageId":"75","endLine":2,"endColumn":26},{"ruleId":"72","severity":1,"message":"77","line":9,"column":19,"nodeType":"74","messageId":"75","endLine":9,"endColumn":27},{"ruleId":"72","severity":1,"message":"73","line":22,"column":13,"nodeType":"74","messageId":"75","endLine":22,"endColumn":16},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.","ArrayExpression",["80"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setUsers' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [state]",{"range":"83","text":"84"},[651,653],"[state]"]